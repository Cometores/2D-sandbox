//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/HorrorGame/HG_InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HG_InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HG_InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HG_InputActions"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""97b4a940-beec-4b36-970d-3556952ad163"",
            ""actions"": [
                {
                    ""name"": ""Choice 1"",
                    ""type"": ""Button"",
                    ""id"": ""e9899a48-94fb-41fa-8378-3a2ffc2e297c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choice 2"",
                    ""type"": ""Button"",
                    ""id"": ""b9da9d89-e4c7-4bbd-a135-562070ed8f73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choice 3"",
                    ""type"": ""Button"",
                    ""id"": ""fa185052-ed37-498a-ae03-971cbb6adf4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choice 4"",
                    ""type"": ""Button"",
                    ""id"": ""c209918d-fa36-4549-8212-87975acca252"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd26a768-d203-44cc-83ea-5209a100577c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choice 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8040ad7-84a5-4d44-94c7-e466fc8b4af1"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choice 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""591f1822-41a9-4655-a54b-6263ebb00980"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choice 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5fa8c56-e52d-4463-a79a-284c60e3d707"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choice 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Choice1 = m_Keyboard.FindAction("Choice 1", throwIfNotFound: true);
        m_Keyboard_Choice2 = m_Keyboard.FindAction("Choice 2", throwIfNotFound: true);
        m_Keyboard_Choice3 = m_Keyboard.FindAction("Choice 3", throwIfNotFound: true);
        m_Keyboard_Choice4 = m_Keyboard.FindAction("Choice 4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_Choice1;
    private readonly InputAction m_Keyboard_Choice2;
    private readonly InputAction m_Keyboard_Choice3;
    private readonly InputAction m_Keyboard_Choice4;
    public struct KeyboardActions
    {
        private @HG_InputActions m_Wrapper;
        public KeyboardActions(@HG_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Choice1 => m_Wrapper.m_Keyboard_Choice1;
        public InputAction @Choice2 => m_Wrapper.m_Keyboard_Choice2;
        public InputAction @Choice3 => m_Wrapper.m_Keyboard_Choice3;
        public InputAction @Choice4 => m_Wrapper.m_Keyboard_Choice4;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @Choice1.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice1;
                @Choice1.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice1;
                @Choice1.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice1;
                @Choice2.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice2;
                @Choice2.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice2;
                @Choice2.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice2;
                @Choice3.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice3;
                @Choice3.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice3;
                @Choice3.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice3;
                @Choice4.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice4;
                @Choice4.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice4;
                @Choice4.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnChoice4;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Choice1.started += instance.OnChoice1;
                @Choice1.performed += instance.OnChoice1;
                @Choice1.canceled += instance.OnChoice1;
                @Choice2.started += instance.OnChoice2;
                @Choice2.performed += instance.OnChoice2;
                @Choice2.canceled += instance.OnChoice2;
                @Choice3.started += instance.OnChoice3;
                @Choice3.performed += instance.OnChoice3;
                @Choice3.canceled += instance.OnChoice3;
                @Choice4.started += instance.OnChoice4;
                @Choice4.performed += instance.OnChoice4;
                @Choice4.canceled += instance.OnChoice4;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface IKeyboardActions
    {
        void OnChoice1(InputAction.CallbackContext context);
        void OnChoice2(InputAction.CallbackContext context);
        void OnChoice3(InputAction.CallbackContext context);
        void OnChoice4(InputAction.CallbackContext context);
    }
}
